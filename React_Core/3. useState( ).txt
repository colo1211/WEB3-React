React state

[데이터 저장법] 
1. 변수 : 새로고침 해야 재렌더링
2. state : 새로고침을 하지 않아도 재렌더링 가능 -> web-app

[State] 
변수 대신에 데이터를 저장 할 수 있는 방법
선언을 하면 2개의 데이터가 배열로 선언되기 때문에 destructuring 문법으로 해결한다. 
수시로 변경되는 데이터를 state로 선언하면 유용

[state 쓰는 이유] 
1. 웹이 App처럼 동작하게 만들고 싶어서! 
2. state가 변경되면 HTML이 자동으로 재렌더링이 되기 때문(새로고침 X)
-> 변수는 새로고침을 해야 렌더링이 된다. 


[state 사용 방법]
1. import React , {useState} from 'react'; 
-> 파일 최 상단의 'react'에 {useState}를 import 해준다. 리액트에 있는 내장함수 하나를 쓰겠다고 한 것

2. useState('수원시 맛집');  -> [a,b] 두개의 데이터가 배열 형태로 저장된다. 
a : '수원시 맛집' (state)
b : state 데이터 변경 함수(a를 변경)


3. 관용적으로 다음과 같이 선언한다. 
let [글제목, 글제목변경] = useState('수원시 맛집');
* ES6 destructuring 문법 ex) var [a,b] = [10,1000]; 


[state 변경 방법]
state를 선언했던 배열 두번째에 있는 변경함수 를 통해서 변경한다.
onClick = { ()=>{	글제목변경(대체할 데이터) or 변경함수명	}}

* state 변경함수를 통해서 변경해야 재렌더링이 제대로 실행된다. 

전제 : 수정을 할때는 무조건 변경함수를 통해서 수정한다. 

금기 사항! 
state는 배열이지만 직접 건들지 않는다. ex) 글제목[0] = '용인시 관광명소'; 

예시코드
function 제목바꾸기(){
//방법 1. (추천)  
// deep Copy를 통해서 state를 deep copy (Spread Operate)
  // * 복사한 것이 원본에 영향을 미치지 않음 (값 공유 X)
   var newArray = [ ...글제목 ];	// 변경을 위한 복사본을 newArray에 담는다.  
   newArray[0] = '창원시 여행명소';	// 복사본에 대해서 배열에 대한 수정을 진행한 후에
   글제목변경(newArray);		// 변경 전용 함수에 수정된 배열을 통째로 집어넣어준다.

//방법 2. (비추) 
//그대로 하드코딩해서 함수에 때려넣기
  // 글제목변경(['창원시 여행명소','죽전 카페 거리','종로 젊음의 거리'])
}

<button onClick={ 제목바꾸기 }> 상품 목록 변경 </button>


[onClick]
onClick = { 클릭될 때 실행할 함수 }
함수를 넣을 때 방법 

1. ()={
    실행할 코드를 작성
}

2. function을 선언한 이후에 
onclick = { 함수이름 } 
주의! onClick = {함수이름()} 를 하면 누르지 않아도 바로 즉시 실행이 되어버림 
